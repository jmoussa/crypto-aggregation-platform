// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoinDeskScraperClient is the client API for CoinDeskScraper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoinDeskScraperClient interface {
	GetCoinDeskData(ctx context.Context, in *GetCoinDeskDataRequest, opts ...grpc.CallOption) (*GetCoinDeskDataResponse, error)
}

type coinDeskScraperClient struct {
	cc grpc.ClientConnInterface
}

func NewCoinDeskScraperClient(cc grpc.ClientConnInterface) CoinDeskScraperClient {
	return &coinDeskScraperClient{cc}
}

func (c *coinDeskScraperClient) GetCoinDeskData(ctx context.Context, in *GetCoinDeskDataRequest, opts ...grpc.CallOption) (*GetCoinDeskDataResponse, error) {
	out := new(GetCoinDeskDataResponse)
	err := c.cc.Invoke(ctx, "/pb.CoinDeskScraper/GetCoinDeskData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoinDeskScraperServer is the server API for CoinDeskScraper service.
// All implementations must embed UnimplementedCoinDeskScraperServer
// for forward compatibility
type CoinDeskScraperServer interface {
	GetCoinDeskData(context.Context, *GetCoinDeskDataRequest) (*GetCoinDeskDataResponse, error)
	mustEmbedUnimplementedCoinDeskScraperServer()
}

// UnimplementedCoinDeskScraperServer must be embedded to have forward compatible implementations.
type UnimplementedCoinDeskScraperServer struct {
}

func (UnimplementedCoinDeskScraperServer) GetCoinDeskData(context.Context, *GetCoinDeskDataRequest) (*GetCoinDeskDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinDeskData not implemented")
}
func (UnimplementedCoinDeskScraperServer) mustEmbedUnimplementedCoinDeskScraperServer() {}

// UnsafeCoinDeskScraperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoinDeskScraperServer will
// result in compilation errors.
type UnsafeCoinDeskScraperServer interface {
	mustEmbedUnimplementedCoinDeskScraperServer()
}

func RegisterCoinDeskScraperServer(s grpc.ServiceRegistrar, srv CoinDeskScraperServer) {
	s.RegisterService(&CoinDeskScraper_ServiceDesc, srv)
}

func _CoinDeskScraper_GetCoinDeskData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinDeskDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinDeskScraperServer).GetCoinDeskData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoinDeskScraper/GetCoinDeskData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinDeskScraperServer).GetCoinDeskData(ctx, req.(*GetCoinDeskDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoinDeskScraper_ServiceDesc is the grpc.ServiceDesc for CoinDeskScraper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoinDeskScraper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CoinDeskScraper",
	HandlerType: (*CoinDeskScraperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCoinDeskData",
			Handler:    _CoinDeskScraper_GetCoinDeskData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
